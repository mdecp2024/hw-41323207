<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>fqpabi8</span></p>
<p>個人倉儲: <a href="https://github.com/mdecp2024/hw-41323207">https://github.com/mdecp2024/hw-41323207</a></p>
<p>個人網站: <a href="https://mdecp2024.github.io/hw-41323207">https://mdecp2024.github.io/hw-41323207</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p>以下影片說明如何在作業網站加入 Bython 頁面,同時練習 print 與 for 迴圈的用法:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/t4mYOJBTTr4" width="560"></iframe></p>
<p><a href="https://youtu.be/t4mYOJBTTr4"></a></p>
<h3>w10</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/l4qYnNcplFY" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/nyjEjPtVtKA" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/J5EGMRwuC_g" width="560"></iframe></p>
<h3>w11_hw</h3>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p>第一題:<a href="https://mdecp2024.github.io/hw-41323207/content/Brython.html?src=https://gist.githubusercontent.com/41323207/e85a80c2a5d736298ac54652d3f9ffe4/raw/5fb6d2844b7e22396f8f808a873759b00020bf88/hw1.py">"*"字號型圖</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def draw_circle(radius, center, size=10):
    h, k = center  # 圓心座標
    for y in range(size):
        for x in range(size):
            # 計算 (x, y) 是否在圓形的範圍內
            if (x - h)**2 + (y - k)**2 &lt;= radius**2:
                print('*', end=' ')
            else:
                print(' ', end=' ')
        print()  # 換行

# 設定圓心為 (5, 5)，半徑為 4
draw_circle(4, (5, 5))</pre>
<p></p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p>第二題:<a href="https://mdecp2024.github.io/hw-41323207/content/Brython.html?src=https://gist.githubusercontent.com/41323207/e85a80c2a5d736298ac54652d3f9ffe4/raw/97b2f9891e9d7937f5154267cde6e7209b66686b/hw2.py">網頁上的方格與塗色</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def draw_circle(radius, center, size=10):
    h, k = center  # 圓心座標
    for y in range(size):
        for x in range(size):
            # 計算 (x, y) 是否在圓形的範圍內
            if (x - h)**2 + (y - k)**2 &lt;= radius**2:
                print('*', end=' ')
            else:
                print(' ', end=' ')
        print()  # 換行

# 設定圓心為 (5, 5)，半徑為 4
draw_circle(4, (5, 5))
from browser import html
from browser import document as doc

# 利用 html 建立畫布
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每格的像素數
gs = 40  # 每個方格的大小設為 40，可以根據需要調整大小

# 獲取繪圖上下文
ctx = canvas.getContext("2d")

# 繪製矩形的函數
def dRect(lux, luy, w, h, s=1, c='#ff0000'):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()

# 繪製網格並在每格內填充黑色圓形區域
def grid(width, height, grid_pix, cx, cy, r):
    for i in range(width):
        for j in range(height):
            # 如果這個格子在圓形區域內，將其填充為黑色
            if (i - cx) ** 2 + (j - cy) ** 2 &lt;= r ** 2:
                ctx.fillStyle = "black"
                ctx.fillRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix)
            else:
                # 其餘格子繪製為灰色
                dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")

# 設定圓形的位置與半徑
circle_center_x = 5  # 圓心在 10x10 方格的中間位置
circle_center_y = 5
circle_radius = 4    # 圓的半徑

# 繪製 10x10 的網格，每格大小為 40 像素
grid(10, 10, gs, circle_center_x, circle_center_y, circle_radius)</pre>
<p></p>
<p><a href="https://mdecp2024.github.io/hw-41323207/content/Brython.html?src=https://gist.githubusercontent.com/41323207/25975e50fa5d491eb4f30b60ec533304/raw/094a1ba06ed2615f6c14228d44583f3527f36c24/hw2.py">課堂練習</a></p>
<p></p>
<p><a href="https://mdecp2024.github.io/hw-41323207/content/Brython.html?src=https://gist.githubusercontent.com/41323207/d9112ada41c308ae3048b78e0f01ac44/raw/71227db59704e5bcba252541c56d3b69c581eff4/hw3.py">圖框</a></p>
<h3>w12</h3>
<h3>w13_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-41323207/content/Brython.html?src=https://gist.githubusercontent.com/41323207/9e4eb6d03cddf7c89f7fb5e6f391bdbe/raw/8cadf6ff949548d0be9eebeec3120dff83cb2418/hw5.py">圓</a>:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 繪製兩個矩形
ctx.strokeStyle = 'red' # 設定矩形顏色為紅色
ctx.beginPath()
ctx.rect(150, 150, 200, 200)
ctx.rect(250, 250, 200, 200)
ctx.stroke()

# 繪製對角線，顏色設定為藍色
ctx.strokeStyle = 'blue' # 設定對角線顏色為藍色
ctx.beginPath()
ctx.moveTo(150, 150)
ctx.lineTo(350, 350)
ctx.stroke()

# 計算外切圓的圓心和半徑
# 矩形 1 的屬性
x1, y1, w1, h1 = 150, 150, 200, 200
# 矩形 2 的屬性
x2, y2, w2, h2 = 250, 250, 200, 200

# 矩形 1 的對角線長度
diagonal1 = math.sqrt(w1**2 + h1**2)
radius1 = diagonal1 / 2 # 外切圓半徑是對角線長度的一半
centerX1 = x1 + w1 / 2 # 圓心 X 坐標
centerY1 = y1 + h1 / 2 # 圓心 Y 坐標

# 繪製矩形 1 的外切圓
ctx.strokeStyle = 'black' # 設定圓的顏色為綠色
ctx.beginPath()
ctx.arc(centerX1, centerY1, radius1, 0, 2 * math.pi) # 圓心和半徑
ctx.stroke()

# 矩形 2 的對角線長度
diagonal2 = math.sqrt(w2**2 + h2**2)
radius2 = diagonal2 / 2 # 外切圓半徑是對角線長度的一半
centerX2 = x2 + w2 / 2 # 圓心 X 坐標
centerY2 = y2 + h2 / 2 # 圓心 Y 坐標

# 繪製矩形 2 的外切圓
ctx.strokeStyle = 'black' # 設定圓的顏色為紫色
ctx.beginPath()
ctx.arc(centerX2, centerY2, radius2, 0, 2 * math.pi) # 圓心和半徑
ctx.stroke()</pre>
<p><a href="https://mdecp2024.github.io/hw-41323207/content/Brython.html?src=https://gist.githubusercontent.com/41323207/1a5e4dac9823948d9b1a6ac8dde3d066/raw/285488cfcf29dc2db9ab8c11118cd12bd94d87f8/hw7.py">圓塗色</a>:<br/><br/></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 設置畫布
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.rect(200, 200, 200, 200)
ctx.stroke()

# 畫對角線 (藍色)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫兩個圓形 (黑色)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)
ctx.stroke()

# 判斷點的位置
def point_in_circle1(x, y):
cx, cy, r = 200, 200, 141.4
return (x - cx) ** 2 + (y - cy) ** 2 &lt; r ** 2

def point_in_square1(x, y):
return 100 &lt;= x &lt;= 300 and 100 &lt;= y &lt;= 300

def point_outside_square1(x, y):
return not point_in_square1(x, y)

def point_in_circle2(x, y):
cx, cy, r = 300, 300, 141.4
return (x - cx) ** 2 + (y - cy) ** 2 &lt; r ** 2

def point_inside_square2(x, y):
return 200 &lt;= x &lt;= 400 and 200 &lt;= y &lt;= 400

def point_on_line_segment(x, y):
return y == x and 100 &lt;= x &lt;= 300 and 100 &lt;= y &lt;= 300

def point_above_line(x, y):
return y &lt; x

def point_below_line(x, y):
return y &gt; x

# 判斷點是否在正方形的上方、下方、左方、右方
def point_above_square1(x, y):
return y &lt; 100

def point_below_square1(x, y):
return y &gt; 300

def point_left_of_square1(x, y):
return x &lt; 100

def point_right_of_square1(x, y):
return x &gt; 300

def point_above_square2(x, y):
return y &lt; 200

def point_below_square2(x, y):
return y &gt; 400

def point_left_of_square2(x, y):
return x &lt; 200

def point_right_of_square2(x, y):
return x &gt; 400

# 取得點所屬區域的函式
def get_region(x, y):
regions = []
if point_in_circle1(x, y):
regions.append("circle1")
if point_in_square1(x, y):
regions.append("inside_square1")
if point_outside_square1(x, y):
regions.append("outside_square1")
if point_in_circle2(x, y):
regions.append("circle2")
if point_inside_square2(x, y):
regions.append("inside_square2")
if point_on_line_segment(x, y):
regions.append("on_line_segment")
if point_above_line(x, y):
regions.append("above_line")
if point_below_line(x, y):
regions.append("below_line")

# 新增正方形上下左右區分
if point_above_square1(x, y):
regions.append("above_square1")
if point_below_square1(x, y):
regions.append("below_square1")
if point_left_of_square1(x, y):
regions.append("left_of_square1")
if point_right_of_square1(x, y):
regions.append("right_of_square1")

if point_above_square2(x, y):
regions.append("above_square2")
if point_below_square2(x, y):
regions.append("below_square2")
if point_left_of_square2(x, y):
regions.append("left_of_square2")
if point_right_of_square2(x, y):
regions.append("right_of_square2")

return regions

# 根據區域屬性決定顏色
def get_region_color(x, y):
regions = get_region(x, y)

# 只要點不在兩個圓內，則不進行顏色標註
if "circle1" not in regions and "circle2" not in regions:
return None # 圓外區域不著色

# 第一個圓內且第二個圓內
if "circle1" in regions and "circle2" in regions:
return "lightgreen" # 兩個圓內部的區域

# 第一個圓內且在第一個正方形內部
if "circle1" in regions and "inside_square1" in regions:
if point_above_line(x, y):
return "white" # 第一個圓內且位於第一個正方形內部且對角線上方
elif point_below_line(x, y):
return "white" # 第一個圓內且位於第一個正方形內部且對角線下方

# 第一個圓內且不在第一個正方形內部
if "circle1" in regions and "outside_square1" in regions:
if point_above_square1(x, y):
return "gray" # 第一個圓內且位於正方形上方
elif point_below_square1(x, y):
return "yellow" # 第一個圓內且位於正方形下方
elif point_left_of_square1(x, y):
return "black" # 第一個圓內且位於正方形左方
elif point_right_of_square1(x, y):
return "blue" # 第一個圓內且位於正方形右方

# 第二個圓內且在第二個正方形內部
if "circle2" in regions and "inside_square2" in regions:
return "white" # 第二個圓內且在正方形2內部

# 第二個圓內但不在第二個正方形內部
if "circle2" in regions and "outside_square2" in regions:
if point_above_square2(x, y):
return "blue" # 第二個圓內且位於正方形2上方
elif point_below_square2(x, y):
return "pink" # 第二個圓內且位於正方形2下方
elif point_left_of_square2(x, y):
return "lightgreen" # 第二個圓內且位於正方形2左方
elif point_right_of_square2(x, y):
return "lightyellow" # 第二個圓內且位於正方形2右方

# 標註對角線位置
if "on_line_segment" in regions:
return "black" # 位於對角線上
elif "above_line" in regions:
return "purple" # 位於對角線上方
elif "below_line" in regions:
return "green" # 位於對角線下方

return None # 沒有符合的區域，則不著色

# 繪製掃描點並著色
def scan_and_draw():
for y in range(0, canvas.height, 1): # 每10個像素掃描一次
for x in range(0, canvas.width, 1):
color = get_region_color(x, y)
if color:
ctx.fillStyle = color
ctx.beginPath()
ctx.arc(x + 1, y + 1, 1, 0, 2 * 3.14) # 用圓點標示
ctx.fill()

# 開始掃描和標示
scan_and_draw()</pre>
<p><br/><br/></p><h3>w14</h3>
<p>請根據兩個圓繪圖所圍成的<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/0e370b2ad0c429ab4c8905244022c27cfca8cfba/two_cicle_fill_ex1.py">區域</a>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/a9d887546e024d52d16c228a6657146580342746/two_cicle_section_fill_ex.py">參考範例</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5eca62565d509668d731720f1994e127/raw/7a086162a04783664bf64d9abd49da059634a0b4/multiple_circle_interaction_fill.py">多個圓相交區域著色範例</a></p>
<p>以下為參考範例的詳細說明, 請根據此一程式架構, 修改為三個圓的區域塗色任務.</p>
<p><a href="https://mdecp2024.github.io/hw-41323207/content/Brython.html?src=https://gist.githubusercontent.com/41323207/d1cd5f286c05c2459f5f8c47af01b9c0/raw/620636a6eee35556d1a9fa2bdd23d82e97440c19/hw6.py">三個圓塗色</a>:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=500, canvas_height=500, id="brython_div1"):
# 創建 canvas 並設置寬度與高度
canvas = html.CANVAS(width=canvas_width, height=canvas_height)
brython_div = doc[id]
brython_div &lt;= canvas

# 獲取 canvas 的 2D 上下文
ctx = canvas.getContext("2d")

return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
r = random.randint(0, 255)
g = random.randint(0, 255)
b = random.randint(0, 255)
return f"rgb({r}, {g}, {b})"

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2):
# 初始化畫布
canvas, ctx = initialize_canvas(500, 500)

# 清除畫布
ctx.clearRect(0, 0, canvas.width, canvas.height)

# 顏色區域存儲
color_dict = {}

# 使用掃描線方法填充區域
for py in range(0, canvas.height):
# 逐行掃描，判斷每個點是否在圓內
current_color = None # 當前掃描線區域的顏色
for px in range(0, canvas.width):
in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
in_circle3 = is_point_in_circle(px, py, x3, y3, r3)

if in_circle1 and in_circle2 and in_circle3:
# 三個圓的交集區域
if "intersection_all" not in color_dict:
color_dict["intersection_all"] = random_color_generator()
current_color = color_dict["intersection_all"]
elif in_circle1 and in_circle2:
# 圓1和圓2的交集區域
if "intersection_1_2" not in color_dict:
color_dict["intersection_1_2"] = random_color_generator()
current_color = color_dict["intersection_1_2"]
elif in_circle1 and in_circle3:
# 圓1和圓3的交集區域
if "intersection_1_3" not in color_dict:
color_dict["intersection_1_3"] = random_color_generator()
current_color = color_dict["intersection_1_3"]
elif in_circle2 and in_circle3:
# 圓2和圓3的交集區域
if "intersection_2_3" not in color_dict:
color_dict["intersection_2_3"] = random_color_generator()
current_color = color_dict["intersection_2_3"]

elif in_circle1:
# 只在圓1內
if "circle1" not in color_dict:
color_dict["circle1"] = random_color_generator()
current_color = color_dict["circle1"]
elif in_circle2:
# 只在圓2內
if "circle2" not in color_dict:
color_dict["circle2"] = random_color_generator()
current_color = color_dict["circle2"]
elif in_circle3:
# 只在圓3內
if "circle3" not in color_dict:
color_dict["circle3"] = random_color_generator()
current_color = color_dict["circle3"]
else:
# 點不在兩個圓內，畫外區域
current_color = "white" # 背景色白色

# 填充顏色
ctx.fillStyle = current_color
ctx.fillRect(px, py, 1, 1) # 填充一個像素

# 直接設定圓心和半徑
x1, y1, r1 = 150, 200, 100 # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100 # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 350, 200, 100 # 圓3：圓心 (350, 200)，半徑 100

# 呼叫畫圓函式
draw_circles(x1, y1, r1, x2, y2, r2)</pre>
<p><br/><br/></p>
<h3>w15</h3>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p><h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w5</h3>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def print_pyramid(height):
for i in range(height):
# 打印空格
print(' ' * (height - i - 1), end='')
# 打印星號
print('*' * (2 * i + 1))

# 設定金字塔高度為 6
print_pyramid(6)</pre>
<p><br/><br/></p>
<p>         *<br/>       ***<br/>     *****<br/>   *******<br/> *********<br/>***********</p>
<h3>w6</h3>
<p>操作步驟:</p>
<ol>
<li>下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (可攜程式環境)</li>
<li>下載<span> </span><a href="https://mde.tw/cp2024/downloads/zmq_remote_api_ex_cube_triangle.7z">zmq_remote_api_ex_cube_triangle.7z</a> (利用 Python 控制模擬場景中的物件)</li>
<li>進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式,<span> </span><a href="https://github.com/CoppeliaRobotics">原始碼</a>)</li>
<li>啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器</li>
<li>執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出:</li>
<li>netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050<br/>netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050</li>
<li>開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream</li>
<li>利用 SciTE 開啟 put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式</li>
<li>使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景<img alt="" height="205" src="/images/螢幕擷取畫面 2024-10-16 121454.png" width="410"/>   120.113.99.16:23020</li>
</ol>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<p style="padding-left: 30px;"></p>
<p style="padding-left: 30px;"></p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>